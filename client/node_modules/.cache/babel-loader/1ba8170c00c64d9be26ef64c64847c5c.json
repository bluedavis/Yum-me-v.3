{"ast":null,"code":"// import auth0 from \"auth0-js\";\n// export default class Auth {\n//   constructor(history) {\n//     this.history = history;\n//     this.userProfile = null;\n//     this.auth0 = new auth0.WebAuth({\n//       domain: process.env.REACT_APP_AUTH0_DOMAIN,\n//       clientID: process.env.REACT_APP_AUTH0_CLIENT_ID,\n//       redirectUri: process.env.REACT_APP_AUTH0_CALLBACK_URL,\n//       responseType: \"token id_token\",\n//       scope: \"openid profile email\"\n//     });\n//   }\n//   login = () => {\n//     this.auth0.authorize();\n//   };\n//   //1. get data from url, parse it and write it to session\n//   handleAuthentication = () => {\n//     this.auth0.parseHash((err, authResult) => {\n//       if (authResult && authResult.accessToken && authResult.idToken) {\n//         this.setSession(authResult);\n//         this.history.push(\"/\");\n//       } else if (err) {\n//         this.history.push(\"/\");\n//         alert(`Error: ${err.error}. Check the console for further details`);\n//         console.log(err);\n//       }\n//     });\n//   };\n//   setSession = authResult => {\n//     //set time for access token to expire\n//     const expiresAt = JSON.stringify(\n//       authResult.expiresIn * 1000 + new Date().getTime()\n//     );\n//     localStorage.setItem(\"acces_token\", authResult.accessToken);\n//     localStorage.setItem(\"id_token\", authResult.idToken);\n//     localStorage.setItem(\"expires_at\", expiresAt);\n//   };\n//   isAuthenticated() {\n//     const expiresAt = JSON.parse(localStorage.getItem(\"expires_at\"));\n//     return new Date().getTime() < expiresAt;\n//   }\n//   logout = () => {\n//     localStorage.removeItem(\"acces_token\");\n//     localStorage.removeItem(\"id_token\");\n//     localStorage.removeItem(\"expires_at\");\n//     this.userProfile = null;\n//     this.auth0.logout({\n//       clientID: process.env.REACT_APP_AUTH0_CLIENT_ID,\n//       returnTo: \"http://localhost:3000\"\n//     });\n//   };\n//   getAccessToken = () => {\n//     const accesToken = localStorage.getItem(\"acces_token\");\n//     if (!accesToken) {\n//       throw new Error(\"No access token found\");\n//     }\n//     return accesToken;\n//   };\n//   getProfile = cb => {\n//     if (this.userProfile) return cb(this.userProfile);\n//     this.auth0.client.userInfo(this.getAccessToken(), (err, profile) => {\n//       if (profile) this.userProfile = profile;\n//       cb(profile, err);\n//     });\n//   };\n// }","map":{"version":3,"sources":["/Users/lerod/Desktop/Yum-me-v.3/client/src/Auth/Auth.js"],"names":[],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import auth0 from \"auth0-js\";\n\n// export default class Auth {\n//   constructor(history) {\n//     this.history = history;\n//     this.userProfile = null;\n//     this.auth0 = new auth0.WebAuth({\n//       domain: process.env.REACT_APP_AUTH0_DOMAIN,\n//       clientID: process.env.REACT_APP_AUTH0_CLIENT_ID,\n//       redirectUri: process.env.REACT_APP_AUTH0_CALLBACK_URL,\n//       responseType: \"token id_token\",\n//       scope: \"openid profile email\"\n//     });\n//   }\n\n//   login = () => {\n//     this.auth0.authorize();\n//   };\n\n//   //1. get data from url, parse it and write it to session\n\n//   handleAuthentication = () => {\n//     this.auth0.parseHash((err, authResult) => {\n//       if (authResult && authResult.accessToken && authResult.idToken) {\n//         this.setSession(authResult);\n//         this.history.push(\"/\");\n//       } else if (err) {\n//         this.history.push(\"/\");\n//         alert(`Error: ${err.error}. Check the console for further details`);\n//         console.log(err);\n//       }\n//     });\n//   };\n\n//   setSession = authResult => {\n//     //set time for access token to expire\n//     const expiresAt = JSON.stringify(\n//       authResult.expiresIn * 1000 + new Date().getTime()\n//     );\n\n//     localStorage.setItem(\"acces_token\", authResult.accessToken);\n//     localStorage.setItem(\"id_token\", authResult.idToken);\n//     localStorage.setItem(\"expires_at\", expiresAt);\n//   };\n\n//   isAuthenticated() {\n//     const expiresAt = JSON.parse(localStorage.getItem(\"expires_at\"));\n//     return new Date().getTime() < expiresAt;\n//   }\n\n//   logout = () => {\n//     localStorage.removeItem(\"acces_token\");\n//     localStorage.removeItem(\"id_token\");\n//     localStorage.removeItem(\"expires_at\");\n//     this.userProfile = null;\n//     this.auth0.logout({\n//       clientID: process.env.REACT_APP_AUTH0_CLIENT_ID,\n//       returnTo: \"http://localhost:3000\"\n//     });\n//   };\n\n//   getAccessToken = () => {\n//     const accesToken = localStorage.getItem(\"acces_token\");\n//     if (!accesToken) {\n//       throw new Error(\"No access token found\");\n//     }\n//     return accesToken;\n//   };\n\n//   getProfile = cb => {\n//     if (this.userProfile) return cb(this.userProfile);\n//     this.auth0.client.userInfo(this.getAccessToken(), (err, profile) => {\n//       if (profile) this.userProfile = profile;\n//       cb(profile, err);\n//     });\n//   };\n// }\n"]},"metadata":{},"sourceType":"module"}